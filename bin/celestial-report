#!/usr/bin/perl

=head1 NAME

B<celestial-report> - generate and deliver all reports that are due

=head1 SYNOPSIS

B<celestial-report> [B<options>]

=head1 DESCRIPTION

Generates reports from the Celestial database and delivers them to configured email addresses.

=head1 OPTIONS

=over 8

=item B<--dryrun>

Print reports to stdout instead of emailing.

=item B<--help>

Show this page.

=item B<--list>

List all configured repositories.

=item B<--verbose>

Be more verbose.

=back

=cut

use strict;
use warnings;

use POSIX qw/:sys_wait_h strftime/;

use vars qw($VERSION $DEBUG $opt_identifier $GRANULARITY %SETTINGS $CGI);

# Default settings
$VERSION = '3.02';

use Getopt::Long;
use Pod::Usage;
use Encode;

use Celestial::DBI;
use Celestial::CGI;
use Net::SMTP;

use constant {
	WITH_DAYS => 1,
	WITH_SECONDS => 2
};

# Set up the environment
$0 = "celestial-report";

my( $opt_verbose, $opt_list, $opt_repository, $opt_help, $opt_cfg, $opt_fork, $opt_identifier, $opt_force, $opt_dryrun );
$opt_verbose = 0;
$opt_fork = 1;

GetOptions(
	'verbose+' => \$opt_verbose,
	'list' => \$opt_list,
	'repository=s' => \$opt_repository,
	'help' => \$opt_help,
	'cfg=s' => \$opt_cfg,
	'fork!' => \$opt_fork,
	'identifier=s' => \$opt_identifier,
	'force' => \$opt_force,
	'dryrun' => \$opt_dryrun,
) or pod2usage("Invalid argument");

pod2usage(1) if $opt_help;

if( defined($opt_repository) && $opt_repository =~ /\D/ ) {
	pod2usage("Repository argument must be numeric.");
}

$DEBUG = $opt_verbose;

my $dbh = Celestial::DBI->connect() or die "Unable to connect to database: $!";

foreach($dbh->listConfigs) {
	$SETTINGS{ lc($_) } = $dbh->$_;
}

my $smtp = Net::SMTP->new( $SETTINGS{ 'mailhost' } || 'localhost' );

$CGI = Celestial::CGI->new(
	subscription => $Celestial::Config::SETTINGS->{ paths }->{ subscription },
);

my $sth = $dbh->prepare( "SELECT DISTINCT `email` FROM Reports WHERE `previous` is Null OR `previous` + INTERVAL `frequency` DAY < NOW()" );
$sth->execute or die $!;

my %REPO_CACHE;

while(my ($email) = $sth->fetchrow_array ) {
	my $s = $dbh->prepare( "SELECT `repository` FROM Reports WHERE `email`=? AND (`previous` is Null OR `previous` + INTERVAL `frequency` DAY < NOW())" );
	$s->execute($email);
	my $msg = '';
	my @repos;
	while(my ($repoid) = $s->fetchrow_array ) {
		my $repo = $REPO_CACHE{$repoid} ||= $dbh->getRepository($repoid);
		push @repos, $repo;
		my $rep = $repo->getReport( $email );
		$msg .= generate_report( $rep );
		$rep->touch() unless $opt_dryrun;
	}
	$msg = "To: " . $email . "\n" .
		"Subject: " . $CGI->msg( 'report.subject', $SETTINGS{'repositoryname'} ) . "\n\n" .
		$CGI->msg( 'report.header',
			$email,
			join('',map({ $_->identifier . "\n" } @repos)),
			$CGI->subscription . "?email=" . $CGI->uri_escape($email)
		) . "\n" .
		$msg .
		$CGI->msg( 'report.footer', $SETTINGS{'adminemail'} );
		
	if( $opt_dryrun ) {
		print $msg;
	} else {
		$smtp->mail( $SETTINGS{ adminemail } );
		$smtp->to( $email );
		$smtp->data( encode("iso-8859-1", $msg) );
	}
}
$sth->finish;

$dbh->disconnect;

$smtp->quit;

sub generate_report
{
	my $rep = shift;
	my $dbh = $rep->dbh;
	my $repo = $rep->repository;

	my $str = $CGI->msg( 'report.repository.header', $repo->identifier, $repo->baseURL ) . "\n";

	$str .= $rep->previous ?
		$CGI->msg( 'report.period', $CGI->datestamp($rep->previous), $CGI->datestamp($dbh->now()) ) :
		$CGI->msg( 'report.periodto', $CGI->datestamp($dbh->now()) );
	$str .= "\n\n";

	$str .= $CGI->msg( 'report.heading.mdfs' ) . "\n";
	foreach my $mdf ($repo->listMetadataFormats) {
		$str .= $CGI->msg( 'report.mdf.heading', $mdf->metadataPrefix) . "\n";
		$str .= $CGI->msg( 'report.mdf.attempt', $CGI->datestamp($mdf->lastAttempt)) . "\n";
		$str .= $CGI->msg( 'report.mdf.successful', $CGI->datestamp($mdf->lastHarvest)) . "\n";
	}
	$str .= "\n";

	# Errors
	my %errs = $rep->errorsReport;
	if( %errs ) {
		$str .= $CGI->msg( 'report.errors.heading' ) . "\n";
		foreach my $mdp (sort { $a cmp $b } keys %errs ) {
			foreach my $err (@{$errs{$mdp}}) {
				$str .= sprintf("\t%s\t%s\n", $mdp, $err);
			}
		}
		$str .= "\n";
	} else {
		$str .= $CGI->msg( 'report.errors.none' ) . "\n\n";
	}

	# Records
	my %recs = $rep->recordsReport;
	$str .= $CGI->msg( 'report.heading.records' ) . "\n\n";
	foreach my $mdp (sort { $a cmp $b } keys %recs) {
		$str .= sprintf("\t%d\t%s\n", $recs{$mdp}, $mdp);
	}
	$str .= "\n";

	# Fulltexts
	my %fts = $rep->fulltextsReport;
	if( %fts ) {
		$str .= $CGI->msg( 'report.heading.fulltext' );
		foreach my $fmt (sort { $a cmp $b } keys %fts) {
			$str .= sprintf("\t%d\t%s\n", $fts{$fmt}, $fmt);
		}
		$str .= "\n";
	} else {
		$str .= $CGI->msg( 'report.fulltext.none' );
	}

	return $str;
}
