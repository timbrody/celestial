#!/usr/bin/perl -I/opt/eprints3/perl_lib

=head1 NAME

B<celestial> - harvest all new records

=head1 SYNOPSIS

B<celestial> [B<options>] [B<repositories>]

=head1 DESCRIPTION

This script downloads and stores all new records from configured repositories.

celestial forks upto 10 child processes.

=head1 OPTIONS

=over 8

=item B<--help>

Show this page.

=item B<--dryrun>

Do not write any records or touch datestamps. Will still add sets, metadata
formats and lock/unlock. Errors encountered during the harvest are also logged.

=item B<--force>

Ignore repository locks (you probably don't want to do this).

=item B<--identifier>

Harvest only the given OAI identifier.

=item B<--list>

List all configured repositories.

=item B<--nofork>

Disable forking.

=item B<--nofulltext>

Disable full-text downloads and format identification.

=item B<--repository>

Harvest only the repository given (use B<--list> to get a list of identifiers).

=item B<--missing>

Only attempt to get fulltexts where there is no record of one existing.

=item B<--all>

Perform a complete harvest.

=item B<--allfulltext>

Attempt to get fulltexts for all records, not just since the last time we did a fulltext harvest.

=item B<--verbose>

Be more verbose.

=back

=cut

use Carp;
use EPrints qw( no_check_user );
use HTML::Entities;
use POSIX 'setsid';

use strict;
use warnings;
use encoding 'utf8';
use FindBin;
use lib "$FindBin::Bin/../lib";

binmode(STDOUT,":utf8");

use POSIX qw/:sys_wait_h strftime/;

use vars qw($VERSION $MAX_HARVESTERS $ADMINEMAIL $HTTP_TIMEOUT $DEBUG $GRANULARITY $JAVA $DROID $DROID_SIG $MAX_FILE_SIZE);

$VERSION = '3.02';
$HTTP_TIMEOUT = 300; # In seconds
$MAX_FILE_SIZE = 1024*1024*10; # 10MB

$JAVA = '/usr/bin/java';
$DROID = '/home/celestial/share/DROID/DROID.jar';
$DROID_SIG = '/home/celestial/share/DROID/DROID_SignatureFile.xml';

use Getopt::Long;
use Pod::Usage;

use HTTP::OAI;
use HTTP::OAI::Metadata::OAI_DC;
use Celestial;
use Date::Parse;
use File::Temp;
use XML::LibXML;
use XML::LibXML::XPathContext;

die if $HTTP::OAI::Harvester::VERSION < 3.12;

use constant {
	WITH_DAYS => 1,
	WITH_SECONDS => 2
};

# Disable eval() to allow easier debug
#$HTTP::OAI::UserAgent::USE_EVAL = 0;
#$HTTP::OAI::Response::USE_EVAL = 0;

our $opt_verbose;
our $opt_identifier;
our $opt_missing;
my( $opt_list, $opt_repository, $opt_help, $opt_cfg, $opt_fork, $opt_force, $opt_fulltext, $opt_dryrun, $opt_allfulltext, $opt_migrate, $opt_all, $opt_daemon, $opt_metadata );
$opt_dryrun = 0;
$opt_verbose = 0;
$opt_fork = 1;
$opt_fulltext = 1;
$opt_daemon = 0;
$opt_metadata = 1;

GetOptions(
	'verbose+' => \$opt_verbose,
	'list' => \$opt_list,
	'repository=s' => \$opt_repository,
	'help' => \$opt_help,
	'cfg=s' => \$opt_cfg,
	'fork!' => \$opt_fork,
	'identifier=s' => \$opt_identifier,
	'force' => \$opt_force,
	'fulltext!' => \$opt_fulltext,
	'metadata!' => \$opt_metadata,
	'missing' => \$opt_missing,
	'dryrun' => \$opt_dryrun,
	'dry-run' => \$opt_dryrun,
	'allfulltext' => \$opt_allfulltext,
	'migrate' => \$opt_migrate,
	'all' => \$opt_all,
	'daemon!' => \$opt_daemon,
) or pod2usage("Invalid argument");

pod2usage(1) if $opt_help;

if( defined($opt_repository) && $opt_repository =~ /\D/ ) {
	pod2usage("Repository argument must be numeric.");
}

my @celestialids = @ARGV;
if( defined $opt_repository )
{
	push @celestialids, $opt_repository;
}

$DEBUG = $opt_verbose;

if( $opt_daemon )
{
	exit if fork();
	chdir('/');
	setsid();
	open(STDOUT, ">", "/tmp/celestial.log") or die "Error writing to log: $!";
	open(STDERR, ">>", "/tmp/celestial.log") or die "Error writing to log: $!";
}

use HTTP::OAI::Debug;
if( $opt_verbose > 2 )
{
	HTTP::OAI::Debug::level( '+' );
}

our $roar = EPrints->new->repository( "roar", noise => $opt_verbose );

#my $cfg  = Celestial::Config->new( $opt_cfg );

use EPrints::Database::Celestial;
our $db = EPrints::Database::Celestial->new( $roar )
	or die "Unable to connect to database: $DBI::errstr";

$ADMINEMAIL = $roar->config( "adminemail" ) or die "adminemail required to harvest\n";
$MAX_HARVESTERS = $roar->config( "celestial", "threads" ) || 10;

#$JAVA = $cfg->get_conf( "java" ) || $JAVA;
#$DROID = $cfg->get_conf( "droid", "jar" ) || $DROID;
#$DROID_SIG = $cfg->get_conf( "droid", "signature" ) || $DROID_SIG;

# Set up the environment
$0 = "celestial-harvest";

# Current number of active harvesters
my $c = 0;

if( $opt_list ) {
	$roar->dataset( "celestial" )->search->map(sub {
		my( undef, undef, $repo ) = @_;

		print $roar->xhtml->to_text_dump( $repo->render_citation( "brief" ) ), "\n";
	});
	exit;
}

my %CHILDREN;

$SIG{'USR2'} = sub {
	print "(parent) Waiting for following harvesters to finish (pid/identifier):\n";

	while( my ($pid,$repo) = each %CHILDREN ) {
		printf("\t%d\t%s\n", $pid, $repo->id);
	}
};

my $list;
if( @celestialids )
{
	$list = $roar->dataset( "celestial" )->list( \@celestialids );
}
else
{
	$list = $roar->dataset( "celestial" )->search(
		custom_order => "cardinality"
	);
}


# For each repository spawn a child that will update that repository
$list->map(sub {
	(undef, undef, my $celestial) = @_;

	if( scalar keys %CHILDREN >= $MAX_HARVESTERS )
	{
		my $pid = wait();
		my $r = delete $CHILDREN{$pid};
		print "(parent) [" . $r->id . "] $pid finished\n" if $opt_verbose;
	}

	goto NOFORK if !$opt_fork;

	$roar->get_database->{dbh}->{InactiveDestroy} = $db->{dbh}->{InactiveDestroy} = 0;
	# clear CachedKids otherwise DBI will just reconnect to our sockets (bad)
	%{$roar->get_database->{dbh}->{Driver}->{CachedKids}} = ();

	my $pid = fork();
	die "fork failed: $!" if !defined $pid;

	# parent
	if( $pid )
	{
		$CHILDREN{$pid} = $celestial;
	}
	# child
	else
	{
		$0 = "celestial-harvest-".$celestial->id;

		# prevent child closing parent's db connection
		$roar->get_database->{dbh}->{InactiveDestroy} = $db->{dbh}->{InactiveDestroy} = 1;

		# reconnect to the databases after forking
		$roar->get_database->connect;
		$db = EPrints::Database::Celestial->new( $roar );

NOFORK:
		if( !$celestial->obtain_lock( $$ ) )
		{
			if( !$opt_force )
			{
				die "[" . $celestial->id . "] couldn't obtain lock, ignoring\n";
			}
			$celestial->release_lock;
			$celestial->obtain_lock( $$ );
		}
		update_repository(
			repository=>$celestial,
			adminEmail=>$ADMINEMAIL
		);
		$celestial->release_lock;
		exit if $opt_fork;
	}
});

while( scalar keys %CHILDREN )
{
	print "(parent) Waiting for following harvesters to finish (pid/identifier):\n" if $opt_verbose;

	while( my ($pid,$repo) = each %CHILDREN ) {
		printf("\t%d\t%s\n", $pid, $repo->id) if $opt_verbose;
	}

	my $pid = wait();
	die "No child processes?!" if $pid == -1;
	my $r = delete $CHILDREN{$pid};
	print "(parent) [" . $r->id . "] $pid finished: $?\n" if $opt_verbose;
}

sub update_repository {
	my %args = @_;
	my $repo = $args{repository};
	my $adminEmail = $args{adminEmail} || '';

	my ($lastURL, $lastError, $lastResponse);

	my $ha = new HTTP::OAI::Harvester(baseURL=>$repo->value( "url" ),debug=>$DEBUG);
	$ha->agent("Celestial/$VERSION");
	$ha->timeout($HTTP_TIMEOUT);
	$ha->from($adminEmail);
	{ # scopy $stime
		my $stime;
		$ha->delay(sub {
			no warnings; # last time and stime will be undefined
			my $wait = $_[0] - $stime;
			$wait = .5 if $wait < .5;
			$wait = 60 if $wait > 60;
			select(undef,undef,undef,$wait);
			$stime = time();
			return 0;
		});
	}

	$repo->set_status( "Identify" ); $repo->commit;

	# quickly check Identify, otherwise we'll be really patient
	$ha->timeout(10);
	my $identify = $ha->Identify;
	$ha->timeout($HTTP_TIMEOUT);

	my $r = $identify->is_success ? $identify->previous : $identify;

	# update code and content-type for basic PMH interface response
	$repo->set_value( "http_code", $r->code );
	my $content_type = $r->headers->header( "Content-Type" );
	$content_type = (split /;/, $content_type)[0] if defined $content_type;
	$repo->set_value( "http_content_type", $content_type );
	$repo->commit;

	if( $identify->is_error ) {
		my $message = "Unable to get Identify: " . $identify->code . " (" . $identify->message . ")\n".$identify->request->uri;
		warn "[" . $repo->id . "] " . $message if $opt_verbose;
		$repo->set_value( "messages", [] );
		$repo->add_message( "error", $repo->{session}->xml->create_text_node(
			$message
		) );
		$repo->commit;
		return;
	}

	$GRANULARITY = WITH_DAYS;
	if( $identify->granularity and
			$identify->granularity =~ /YYYY-MM-DDThh:mm:ssZ/i )
	{
		$GRANULARITY = WITH_SECONDS;
	}

# warn $repo->identifier .": Protocol version " . $ha->repository->version . "\n";

	# cache Identify response
#	$repo->Identify( $identify->toDOM->toString );
#	$repo->commit;

	$repo->set_status( "ListSets" ); $repo->commit;

	$db->{dbh}->do("UPDATE oai_set SET status='deleted' WHERE celestialid=?",{},$repo->id);

	my $ls = $ha->ListSets(onRecord => sub {
		my $set = shift;
		my $rc = $db->{dbh}->do("UPDATE oai_set SET status=NULL AND name=? WHERE celestialid=? AND spec_hash=UNHEX(SHA1(?))",{},
			$set->setName,
			$repo->id,
			$set->setSpec,
		);
		if( $rc == 0 )
		{
			$db->{dbh}->do("INSERT INTO oai_set (celestialid,spec,spec_hash,name) VALUES (?,?,UNHEX(SHA1(?)),?)",{},
				$repo->id,
				$set->setSpec,
				$set->setSpec,
				$set->setName,
			);
		}
	});
	if( $ls->is_error ) {
		my $lastError = "[" . $repo->id ."] Error requesting ListSets: " . $ls->code . " (" . $ls->message . ")\n";
		warn ($lastError) if $opt_verbose;
		$repo->set_value( "messages", [] );
		$repo->add_message( "error", $repo->{session}->xml->create_text_node( $lastError ) );
		$repo->commit;
		return;
	}
	else
	{
		$db->{dbh}->do("DELETE FROM oai_set WHERE celestialid=? AND status='deleted'", {}, $repo->id);
	}

	$repo->set_status( "ListMetadataFormats" ); $repo->commit;

	my $lmdf = $ha->ListMetadataFormats();
	if( $lmdf->is_error ) {
		my $lastError = "[" . $repo->id . "] Error requesting ListMetadataFormats: " . $lmdf->code . " (" . $lmdf->message . ")\n";
		warn ($lastError)
			if $opt_verbose;
		return;
	}

	my %mdfs;
	foreach my $mdf ($lmdf->metadataFormat)
	{
		$mdfs{$mdf->metadataPrefix} = $mdf;
	}

	my @mdfs;
	foreach my $format (@{$repo->value( "formats" )})
	{
		my $mdf = delete $mdfs{$format->{prefix}};
		next if !defined $mdf;
		$format->{prefix} = $mdf->metadataPrefix;
		$format->{schema} = $mdf->schema;
		$format->{namespace} = $mdf->metadataNamespace;
		push @mdfs, $format;
	}
	foreach my $mdf (values %mdfs)
	{
		push @mdfs, {
			prefix => $mdf->metadataPrefix,
			schema => $mdf->schema,
			namespace => $mdf->metadataNamespace,
		};
	}

	$repo->set_value( "formats", \@mdfs );
	$repo->commit;

	my $oai_dc;
	foreach my $format ($repo->formats)
	{
		$oai_dc = $format, last if $format->{prefix} eq "oai_dc";
	}
	if( !defined $oai_dc )
	{
		warn "[".$repo->id."] No oai_dc available\n"
			if $opt_verbose;
		return;
	}

	my $last_harvest = timestamp($oai_dc->{harvest});
	my $last_token = $oai_dc->{token};

	my $freq = $repo->value( "frequency" );
	my $full_freq = $repo->value( "full_frequency" );

	if( $full_freq )
	{
		my $ok = $db->{dbh}->selectall_arrayref("SELECT ? + INTERVAL ? DAY < NOW()",{},$last_harvest,$full_freq);
		undef $last_harvest if $ok;
	}
	if( $freq && $last_harvest )
	{
		my $ok = $db->{dbh}->selectall_arrayref("SELECT ? + INTERVAL ? DAY < NOW()",{},$last_harvest,$freq);
		return if !$ok;
	}

	if( $opt_all )
	{
		$last_harvest = undef;
	}

	my $latest_harvest = EPrints::Time::get_iso_timestamp();

	$repo->set_status( "ListRecords" ); $repo->commit;

	my( $last_url, $last_error, $last_response ) = harvest_ListRecords(
		harvestAgent => $ha,
		repository => $repo,
		metadataFormat => $oai_dc,
		from => $last_harvest,
		resumptionToken => $last_token,
	);

	if( $last_error )
	{
		my $message = "$last_error - $last_url";
		$repo->add_message( "error", $repo->{session}->xml->create_text_node(
			$message
		) );
		warn "(".$repo->id.") Error in harvest: $message\n"
			if $opt_verbose;
		$repo->commit();
	}
	else
	{
		if( $opt_metadata )
		{
			$oai_dc->{harvest} = $latest_harvest;
			$oai_dc->{full_harvest} = $latest_harvest if !defined $last_harvest;
			my $mdfs = EPrints::Utils::clone( $repo->value( "formats" ) );
			for(@$mdfs)
			{
				$_ = $oai_dc if $_->{prefix} eq 'oai_dc';
			}
			$repo->set_value( "formats", $mdfs );
			$repo->commit();
		}

		my $ok = eval { harvest_Fulltext( 
			harvestAgent => $ha,
			repository => $repo,
			from => ($opt_allfulltext ? undef : $latest_harvest)
		) };

		# clear error messages
		$repo->set_value( "messages", [] );

		if( $@ )
		{
			$repo->add_message( "error", $repo->{session}->xml->create_text_node(
				$@
			) );
		}

		warn "(".$repo->id.") finished harvest started at $latest_harvest\n"
			if $opt_verbose;

		$repo->commit();
	}

	# Update ROAR
	my @plugins;
	push @plugins, $roar->plugin( "Export::ROAR::CelestialSync" );

	$roar->dataset( "archive" )->search(filters => [
		{
			meta_fields => ["registry"],
			value => {
				name => "celestial",
				id => $repo->id,
			},
			match => "EX",
		}
	])->map(sub {
		(undef, undef, my $eprint) = @_;

		foreach my $plugin (@plugins) {
			$plugin->output_dataobj( $eprint );
		}
	});

	1;
}

sub harvest_ListRecords {
	return if !$opt_metadata;

	my( %args ) = @_;
	my( $ha, $repo, $mdf, $from, $set, $token ) = @args{qw(
		harvestAgent
		repository
		metadataFormat
		from
		set
		resumptionToken
	)};

	my $is_full_harvest = !defined $from;
	my $dataset = $roar->dataset( "celestial_dc" );

	my $tmp_table = "listrecords_$$";

	# for full harvests, keep a note of new records so we can remove records
	# that no longer exist
	if( $is_full_harvest )
	{
		$db->{dbh}->do("DROP TEMPORARY TABLE IF EXISTS $tmp_table");
		$db->{dbh}->do("CREATE TEMPORARY TABLE $tmp_table (dcid INT UNSIGNED NOT NULL, PRIMARY KEY(dcid))");
	}

	# update/initialize the cardinality
	($mdf->{cardinality}) = $db->{dbh}->selectrow_array("SELECT COUNT(*) FROM dc WHERE celestialid = ? AND status is Null", {}, $repo->id);
	$mdf->commit;
	$repo->set_value( "cardinality", $mdf->{cardinality} );
	$repo->commit;

	my $missing_identifier = 0;

	my $cb = sub {
		my( $rec, $lr ) = @_;

		printf("%s => %s\n", $rec->identifier, $rec->datestamp) if $opt_verbose > 1;

		if( !$rec->identifier )
		{
			return if $missing_identifier++;
			$repo->add_message( "error", $repo->{session}->xml->create_text_node(
				"Record missing identifier in ".$lr->request->uri
			) );
			return;
		}

		my $request = $lr->request;
		$repo->set_status( $request ? "".$request->uri." [".$rec->identifier."]" : "Unknown URI" ); $repo->commit;

		return if $opt_dryrun;

		# note the token (if available)
		my %q = URI->new( $lr->request->uri )->query_form;
		$mdf->{token} = $q{resumptionToken};

		my $datestamp = EPrints::Time::iso_datetime();

		my $dc = defined $rec->metadata ? $rec->metadata->dc : {};

		$dc->{status} = $rec->status;
		$dc->{datestamp} = $datestamp;
		$dc->{header} = [{ identifier => $rec->identifier }];

		my( $dcid ) = $db->{dbh}->selectrow_array("SELECT dcid FROM dc WHERE celestialid=? AND identifier_hash=UNHEX(SHA1(?))", {},
			$repo->id,
			$rec->identifier
		);

		if( !defined $dcid )
		{
			my $accession = $rec->datestamp;
			if( !$accession || $accession !~ /^\d{4}-\d\d-\d\d/ || $accession gt $datestamp )
			{
				$accession = $datestamp;
			}

			$db->{dbh}->do("INSERT INTO dc (celestialid, status, datestamp, accession, identifier_hash) VALUES (?,?,?,?,UNHEX(SHA1(?)))", {},
				$repo->id,
				$rec->status,
				$datestamp,
				$accession,
				$rec->identifier,
			);

			$dcid = $db->{dbh}->{mysql_insertid};

			$mdf->{cardinality}++;
			$mdf->commit;
		}

		$dc->{dcid} = $dcid;

		$dc->{oai_set} = [];

		my %sets;
		foreach my $spec ($rec->header->setSpec)
		{
			my @parts = split ':', $spec;
			foreach my $i (0..$#parts)
			{
				$sets{join(':', @parts[0..$i])} = undef;
			}
		}

		if( %sets )
		{
			my $results = $db->{dbh}->selectall_arrayref("SELECT oai_setid FROM oai_set WHERE celestialid=? AND spec_hash IN (".join(',', map { "UNHEX(SHA1(?))" } keys %sets).") ORDER BY oai_setid", {},
				$repo->id,
				keys %sets,
			);
			$dc->{oai_set} = [
					map { $_->[0] } @$results
				];
		}

		# update the database record
		$db->update( $dataset, $dc, $dc );

		if( $is_full_harvest )
		{
			$db->{dbh}->do("INSERT IGNORE INTO $tmp_table (dcid) VALUES ($dcid)");
		}
	};

	WITHOUT_TOKEN:
	my $lr = defined($token) ? 
		$ha->ListRecords(
			resumptionToken=>$token,
			onRecord => $cb,
			handlers => {
				metadata => 'HTTP::OAI::Metadata::OAI_DC',
			},
		) :
		$ha->ListRecords(
			force=>1, # Force bad metadata prefixes
			metadataPrefix=>$mdf->{prefix},
			from=>datestamp($from, $GRANULARITY == WITH_SECONDS),
			set=>$set,
			onRecord => $cb,
			handlers => {
				metadata => 'HTTP::OAI::Metadata::OAI_DC',
			},
		);

	# all ok, clear the resumptionToken
	$mdf->{token} = undef if $lr->is_success;
	$mdf->commit; # update cardinality

	$repo->set_value( "cardinality", $mdf->{cardinality} );
	$repo->commit;

	if( $lr->is_error ) {
		# $lr may be an HTTP::Response
		if( defined($token) && $lr->isa( "HTTP::OAI::Response" ) )
		{
			for($lr->errors)
			{
				if( $_->code eq "badResumptionToken" )
				{
					undef $token;
					goto WITHOUT_TOKEN;
				}
			}
		}
		return(
			($lr->request ? $lr->request->uri : 'Unknown URI!'),
			"(" . $repo->id . "/". $mdf->{prefix} . ") Error requesting ListRecords: " . $lr->code . " (" . $lr->message . ")\n",
			$lr->content
		);
	}

	# if this was a full-harvest delete any disappeared records
	if( $is_full_harvest )
	{
		# while there are missing records, delete them 1000 at a time
		while(1)
		{
			my $sql = "SELECT dcid FROM dc LEFT JOIN $tmp_table USING(dcid) WHERE dc.celestialid=".$repo->id." AND $tmp_table.dcid is Null LIMIT 1000";
			my $sth = $db->{dbh}->prepare($sql);
			$sth->execute;
			$sth->bind_columns(\my $id);
			my @ids;
			while($sth->fetch) {
				push @ids, $id;
			}
			if( @ids ) {
				$db->{dbh}->do("DELETE FROM dc WHERE dcid IN (".join(',', @ids).")");
			}
			else {
				last;
			}
		}
		($mdf->{cardinality}) = $db->{dbh}->selectrow_array("SELECT COUNT(*) FROM dc WHERE celestialid = ? AND status is Null", {}, $repo->id);
		$mdf->commit;
	}

	(undef,undef,undef);
}

sub harvest_Fulltext
{
	return unless $opt_fulltext;
	my( %args ) = @_;
	my( $ha, $repo, $from ) = @args{qw( harvestAgent repository from )};

	$repo->set_status( "Fulltext" ); $repo->commit;

	my $ft = Celestial::FullText->new(
		repository => $repo,
		dbh => $db,
		harvestAgent => $ha,
	);

	warn "(".$repo->id.") Harvesting using heuristics for " . $ft->guess_repository_type if $opt_verbose;

	$Celestial::FullText::MAX_FILE_SIZE = $MAX_FILE_SIZE;
	$Celestial::FullText::DEBUG = $opt_verbose;
		
	my $tables = "dc";
	my @logic = ("celestialid=?");
	my @values = ($repo->id);
	if( $from )
	{
		push @logic, "datestamp>=?";
		$from =~ /^(\d{4}-\d\d-\d\d).(\d\d:\d\d:\d\d)/;
		push @values, "$1 $2";
	}
	if( $opt_missing )
	{
		$tables .= " LEFT JOIN dc_fulltext USING(dcid)";
		push @logic, "dc_fulltext.dcid is Null";
	}

	my $sql;
	my $sth;

	$sql = "SELECT COUNT(*) FROM $tables WHERE ".join(' AND ', @logic);
	$sth = $db->{dbh}->prepare( $sql );
	$sth->execute( @values );
	
	my( $total ) = $sth->fetchrow_array;

	warn "Harvesting fulltext for $total records [$sql]\n" if $opt_verbose;

	$sql = "SELECT dcid, accession FROM $tables WHERE ".join(' AND ', @logic);
	$sth = $db->{dbh}->prepare( $sql );
	$sth->execute( @values );

	my $c = 0;

	while( my ($id, $accession) = $sth->fetchrow_array )
	{
		# Remove existing formats for this record
		$db->{dbh}->do("DELETE FROM dc_fulltext WHERE dcid=$id");

		my @formats = $ft->formats( $id );
		warn "[".$repo->id."] full-text for [$id] = ".@formats."\n" if $opt_verbose;

		my $pos = 0;
		foreach my $fmt ( @formats )
		{
			my $ds = $accession;
			if( $fmt->date )
			{
				my $t = Date::Parse::str2time( $fmt->date );
				if( $t )
				{
					$ds = strftime("%Y%m%d%H%M%S", gmtime($t));
				}
			}
			my $url = $fmt->url;
			my $ct = $fmt->mime_type;
			my @types;
			eval { @types = run_file( "$fmt" ) };
			if( $@ )
			{
				warn "[".$repo->id."] there was a problem running file for [$id]: $@\n";
				@types = ();
			}
			@types = ([undef,'Unknown']) unless @types;
			foreach my $type (@types)
			{
				warn sprintf("Got format %s for %s\n", $type->[0], $url) if $opt_verbose;
				$db->{dbh}->do("INSERT INTO dc_fulltext (dcid,pos,fulltext_datestamp,fulltext_url,fulltext_mime_type,fulltext_format) VALUES ($id,?,?,?,?,?)", {}, $pos++, $ds, $url, $type->[0], $type->[1] );
			}
		}

		$repo->set_status( sprintf('Fulltext %d%%', 100*$c++/$total) ); $repo->commit;
	}
	$sth->finish;

	warn "[".$repo->id."] full-text harvest finished\n"
		if $opt_verbose;

	return $ft;
}

sub getMetsRecord
{
	my( $mdf, $id ) = @_;

	my $rec = $mdf->getRecord( $id ) or return;
	
	return if $rec->header->is_deleted or not $rec->metadata;

	$rec->metadata( HTTP::OAI::Metadata::METS->new( dom => $rec->metadata->dom ));

	return $rec;
}

# If the record already has the setSpec, return 0, otherwise add the setSpec and return 1
sub addRecordSetSpec {
	my ($rec, $setSpec) = @_;
	for ($rec->header->setSpec) {
		return 0 if $_ eq $setSpec;
	}
# print "Adding $setSpec to ", $rec->identifier, "\n";
	$rec->header->setSpec($setSpec);
	return 1;
}

sub datestamp {
	my $ds = shift || return undef;
	my $wt = shift;
	$ds =~ s/\D//g;
	my $r = '';
	if( $ds =~ s/^(\d{4})(\d{2})(\d{2})// ) {
		$r = "$1-$2-$3";
	} else {
		die "Cannot extract datestamp from $ds";
	}
	if( $wt and $ds =~ s/^(\d\d)(\d\d)(\d\d)$// ) {
		$r .= "T$1:$2:$3Z";
	}
	return $r;
}

sub timestamp {
	my $ts = shift || return undef;
	if( $ts =~ /^(\d{4})\D?(\d{2})\D?(\d{2})\D?(\d{2})\D?(\d{2})\D?(\d{2})/ ) {
		return "$1-$2-$3T$4:$5:$6Z";
	} else {
		die "Cannot extract timestamp from $ts";
	}
}

sub run_file {
	my( $fn ) = @_;

	my $format = `file -bz $fn`; # brief, look-inside compressed
	chomp($format);

	return () if !$format;
	
	$format =~ s/\(.+$//; # strip commentary
	$format =~ s/^(CDF V2 Document).*/$1/; # CDFs contain detailed info, not just format :-(
	$format =~ s/^.*(HTML document).*/$1/; # as do HTML documents

	my $mime_type = `file -ibz $fn`; # mime-type, brief, look-inside compressed
	chomp($mime_type);
	$mime_type =~ s/;.*$//; # strip char-set etc.

	return[ $mime_type, $format ];
}

sub run_droid {
	my $fn = shift;
	my $tmp = File::Temp->new( UNLINK => 1 );
	my $cmd = "$JAVA -ms20m -jar $DROID -s $DROID_SIG -o $tmp -f XML -l=$fn";
	my $r = system("$cmd >/dev/null 2>&1");
	if( $r != 0 )
	{
		die("Error running $cmd: $?");
	}
	my $doc = XML::LibXML->new->parse_file("$tmp.xml");
	unlink("$tmp.xml");
	my $xc = XML::LibXML::XPathContext->new( $doc );
	$xc->registerNs('rc','http://www.nationalarchives.gov.uk/pronom/FileCollection');
	my @formats;
	for($xc->findnodes("//rc:FileFormatHit")) {
		my %attr;
		foreach my $valnode (grep { $_->nodeType == XML_ELEMENT_NODE } $_->childNodes)
		{
			$attr{ $valnode->nodeName } = $valnode->textContent;
		}
		my $fmt = defined($attr{ 'Version' }) ?
			sprintf("%s (%s)",
					$attr{ 'Name' },
					$attr{ 'Version' }
				   ) :
				$attr{ 'Name' };

		push @formats, [
			$attr{ 'PUID' },
			$fmt,
			];
		#warn "FORMAT: $fn => ", join(',',map { $_ || '(null)' } @{$formats[$#formats]}), "\n";
	}
	return @formats;
}

